interface VariationSettings {
  distance: { enabled: boolean; values: number[] };
  framing: { enabled: boolean; values: { x: number; y: number }[] };
  tilt: { enabled: boolean; values: number[] };
  rotation: { enabled: boolean; values: number[] };
}

interface ScriptOptions {
  templatePath: string;
  artworkPaths: string[];
  outputFolder: string;
  smartObjectName: string;
  outputNames?: (string | undefined)[];
  variations?: VariationSettings;
}

export function generatePhotoshopScript(options: ScriptOptions): string {
  const { templatePath, artworkPaths, outputFolder, smartObjectName, outputNames, variations } = options;
  
  // Convert paths to use forward slashes for Photoshop
  const templatePathJS = templatePath.replace(/\\/g, '/');
  const outputFolderJS = outputFolder.replace(/\\/g, '/');
  const artworkPathsJS = artworkPaths.map(p => p.replace(/\\/g, '/'));

  // Generate variations configuration
  const variationsConfig = variations ? `
  // Variations configuration
  var variations = {
    enabled: ${hasAnyVariations(variations)},
    distance: {
      enabled: ${variations.distance.enabled},
      values: [${variations.distance.values.join(', ')}]
    },
    framing: {
      enabled: ${variations.framing.enabled},
      values: [${variations.framing.values.map(v => `{x: ${v.x}, y: ${v.y}}`).join(', ')}]
    },
    tilt: {
      enabled: ${variations.tilt.enabled},
      values: [${variations.tilt.values.join(', ')}]
    },
    rotation: {
      enabled: ${variations.rotation.enabled},
      values: [${variations.rotation.values.join(', ')}]
    }
  };` : `
  // No variations configured
  var variations = { enabled: false };`;

  return `// Automated Mockup Generator Script with Variations
// Generated by Automated Mockups App

(function() {
  // Configuration
  var templatePath = "${templatePathJS}";
  var outputFolder = "${outputFolderJS}";
  var smartObjectLayerName = "${smartObjectName}";
  var artworkFiles = [
${artworkPathsJS.map(path => `    "${path}"`).join(',\n')}
  ];
  var outputNames = [
${outputNames ? outputNames.map(name => name ? `    "${name}"` : '    null').join(',\n') : artworkPathsJS.map(() => '    null').join(',\n')}
  ];
  ${variationsConfig}
  
  var targetLayerName = null; // Will be set after first selection
  var targetLayerIndex = -1;  // Will be set after first selection
  
  // Main execution
  try {
    // Create output folder if it doesn't exist
    var outputFolderObj = new Folder(outputFolder);
    if (!outputFolderObj.exists) {
      outputFolderObj.create();
    }
    
    // Process each artwork file
    for (var i = 0; i < artworkFiles.length; i++) {
      processArtwork(artworkFiles[i], outputNames[i], i);
    }
    
    var totalFiles = artworkFiles.length;
    if (variations.enabled) {
      var varCount = countVariations();
      totalFiles = totalFiles + " (+" + varCount + " variations each)";
    }
    
    alert("Mockup generation complete!\\nProcessed: " + totalFiles + " files\\nOutput: " + outputFolder);
    
  } catch (e) {
    alert("Error: " + e.toString());
  }
  
  function processArtwork(artworkPath, customOutputName, index) {
    try {
      // Open the template
      var templateFile = new File(templatePath);
      var doc = app.open(templateFile);
      
      // Find the smart object layer
      var smartObjectLayer = findSmartObject(doc, smartObjectLayerName);
      if (!smartObjectLayer) {
        throw new Error("Smart object layer '" + smartObjectLayerName + "' not found!");
      }
      
      // Make the smart object active and open it
      doc.activeLayer = smartObjectLayer;
      var idplacedLayerEditContents = stringIDToTypeID("placedLayerEditContents");
      executeAction(idplacedLayerEditContents, new ActionDescriptor(), DialogModes.NO);
      
      // Now we're in the smart object document
      var smartDoc = app.activeDocument;
      
      // On first run, ask which layer to replace
      if (targetLayerName === null) {
        var layerInfo = getLayerSelectionFromUser(smartDoc);
        if (!layerInfo) {
          smartDoc.close(SaveOptions.DONOTSAVECHANGES);
          doc.close(SaveOptions.DONOTSAVECHANGES);
          throw new Error("User cancelled layer selection");
        }
        targetLayerName = layerInfo.name;
        targetLayerIndex = layerInfo.index;
      }
      
      // Find and remove the target layer
      var targetLayer = null;
      if (targetLayerIndex >= 0 && targetLayerIndex < smartDoc.layers.length) {
        targetLayer = smartDoc.layers[targetLayerIndex];
        // Verify it's still the right layer by name
        if (targetLayer.name !== targetLayerName) {
          // Layer order changed, search by name
          for (var j = 0; j < smartDoc.layers.length; j++) {
            if (smartDoc.layers[j].name === targetLayerName) {
              targetLayer = smartDoc.layers[j];
              targetLayerIndex = j;
              break;
            }
          }
        }
      }
      
      if (!targetLayer) {
        throw new Error("Target layer '" + targetLayerName + "' not found in smart object!");
      }
      
      // Delete the target layer
      smartDoc.activeLayer = targetLayer;
      targetLayer.remove();
      
      // Place the new artwork
      var desc = new ActionDescriptor();
      desc.putPath(charIDToTypeID("null"), new File(artworkPath));
      desc.putBoolean(charIDToTypeID("Lnkd"), false); // Embed
      executeAction(charIDToTypeID("Plc "), desc, DialogModes.NO);
      
      // Get the placed layer and rename it
      var newLayer = smartDoc.activeLayer;
      newLayer.name = targetLayerName;
      
      // Scale to fit the canvas
      scaleLayerToFitCanvas(smartDoc, newLayer);
      
      // Save and close the smart object
      smartDoc.close(SaveOptions.SAVECHANGES);
      
      // Generate base filename
      var artworkFile = new File(artworkPath);
      var baseFileName;
      if (customOutputName) {
        baseFileName = customOutputName;
      } else {
        baseFileName = artworkFile.name.replace(/\\.[^.]+$/, '') + "_mockup";
      }
      
      // Save the base mockup
      var outputFile = new File(outputFolder + "/" + baseFileName + ".png");
      var pngOptions = new PNGSaveOptions();
      pngOptions.compression = 6;
      pngOptions.interlaced = false;
      doc.saveAs(outputFile, pngOptions, true, Extension.LOWERCASE);
      
      // Create variations if enabled
      if (variations.enabled) {
        createVariations(doc, baseFileName, outputFolder);
      }
      
      // Close without saving changes to template
      doc.close(SaveOptions.DONOTSAVECHANGES);
      
    } catch (e) {
      // Try to close any open documents
      try {
        if (app.activeDocument) {
          app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);
        }
      } catch (e2) {}
      
      throw e;
    }
  }
  
  function createVariations(doc, baseFileName, outputFolder) {
    // Save original state
    var originalState = doc.activeHistoryState;
    var variationCount = 0;
    
    // Distance (Scale) variations
    if (variations.distance.enabled && variations.distance.values.length > 0) {
      for (var d = 0; d < variations.distance.values.length; d++) {
        doc.activeHistoryState = originalState;
        var scale = variations.distance.values[d];
        
        // Duplicate and flatten
        var tempDoc = doc.duplicate();
        tempDoc.flatten();
        
        // Apply scale
        applyTransform(tempDoc, scale, scale, 0, 0, 0, 0);
        
        // Save
        variationCount++;
        var fileName = baseFileName + "_d" + scale + ".png";
        saveDocument(tempDoc, outputFolder + "/" + fileName);
        tempDoc.close(SaveOptions.DONOTSAVECHANGES);
      }
    }
    
    // Framing (Position) variations
    if (variations.framing.enabled && variations.framing.values.length > 0) {
      for (var f = 0; f < variations.framing.values.length; f++) {
        doc.activeHistoryState = originalState;
        var frame = variations.framing.values[f];
        
        // Duplicate and flatten
        var tempDoc = doc.duplicate();
        tempDoc.flatten();
        
        // Apply position offset
        applyTransform(tempDoc, 100, 100, frame.x, frame.y, 0, 0);
        
        // Save
        variationCount++;
        var fileName = baseFileName + "_f" + (f + 1) + ".png";
        saveDocument(tempDoc, outputFolder + "/" + fileName);
        tempDoc.close(SaveOptions.DONOTSAVECHANGES);
      }
    }
    
    // Tilt variations
    if (variations.tilt.enabled && variations.tilt.values.length > 0) {
      for (var t = 0; t < variations.tilt.values.length; t++) {
        doc.activeHistoryState = originalState;
        var tiltAngle = variations.tilt.values[t];
        
        // Duplicate and flatten
        var tempDoc = doc.duplicate();
        tempDoc.flatten();
        
        // Apply tilt (skew)
        applyTransform(tempDoc, 100, 100, 0, 0, tiltAngle, 0);
        
        // Save
        variationCount++;
        var fileName = baseFileName + "_t" + tiltAngle + ".png";
        saveDocument(tempDoc, outputFolder + "/" + fileName);
        tempDoc.close(SaveOptions.DONOTSAVECHANGES);
      }
    }
    
    // Rotation variations
    if (variations.rotation.enabled && variations.rotation.values.length > 0) {
      for (var r = 0; r < variations.rotation.values.length; r++) {
        doc.activeHistoryState = originalState;
        var rotation = variations.rotation.values[r];
        
        // Duplicate and flatten
        var tempDoc = doc.duplicate();
        tempDoc.flatten();
        
        // Apply rotation
        applyTransform(tempDoc, 100, 100, 0, 0, 0, rotation);
        
        // Save
        variationCount++;
        var fileName = baseFileName + "_r" + rotation + ".png";
        saveDocument(tempDoc, outputFolder + "/" + fileName);
        tempDoc.close(SaveOptions.DONOTSAVECHANGES);
      }
    }
  }
  
  function applyTransform(doc, scaleX, scaleY, offsetX, offsetY, skewAngle, rotation) {
    doc.selection.selectAll();
    
    var desc = new ActionDescriptor();
    var ref = new ActionReference();
    ref.putEnumerated(charIDToTypeID("Lyr "), charIDToTypeID("Ordn"), charIDToTypeID("Trgt"));
    desc.putReference(charIDToTypeID("null"), ref);
    desc.putEnumerated(charIDToTypeID("FTcs"), charIDToTypeID("QCSt"), charIDToTypeID("Qcsa"));
    
    // Apply offset
    if (offsetX !== 0 || offsetY !== 0) {
      var offsetDesc = new ActionDescriptor();
      offsetDesc.putUnitDouble(charIDToTypeID("Hrzn"), charIDToTypeID("#Pxl"), offsetX);
      offsetDesc.putUnitDouble(charIDToTypeID("Vrtc"), charIDToTypeID("#Pxl"), offsetY);
      desc.putObject(charIDToTypeID("Ofst"), charIDToTypeID("Ofst"), offsetDesc);
    }
    
    // Apply scale
    if (scaleX !== 100 || scaleY !== 100) {
      desc.putUnitDouble(charIDToTypeID("Wdth"), charIDToTypeID("#Prc"), scaleX);
      desc.putUnitDouble(charIDToTypeID("Hght"), charIDToTypeID("#Prc"), scaleY);
    }
    
    // Apply skew (tilt)
    if (skewAngle !== 0) {
      desc.putUnitDouble(charIDToTypeID("SkwH"), charIDToTypeID("#Ang"), skewAngle);
    }
    
    // Apply rotation
    if (rotation !== 0) {
      desc.putUnitDouble(charIDToTypeID("Angl"), charIDToTypeID("#Ang"), rotation);
    }
    
    executeAction(charIDToTypeID("Trnf"), desc, DialogModes.NO);
    doc.selection.deselect();
  }
  
  function saveDocument(doc, filePath) {
    var file = new File(filePath);
    var pngOptions = new PNGSaveOptions();
    pngOptions.compression = 6;
    pngOptions.interlaced = false;
    doc.saveAs(file, pngOptions, true, Extension.LOWERCASE);
  }
  
  function countVariations() {
    var count = 0;
    if (variations.distance.enabled) count += variations.distance.values.length;
    if (variations.framing.enabled) count += variations.framing.values.length;
    if (variations.tilt.enabled) count += variations.tilt.values.length;
    if (variations.rotation.enabled) count += variations.rotation.values.length;
    return count;
  }
  
  function findSmartObject(doc, preferredName) {
    // First try to find by exact name
    if (preferredName && preferredName.length > 0) {
      for (var i = 0; i < doc.layers.length; i++) {
        if (doc.layers[i].name === preferredName && doc.layers[i].kind == LayerKind.SMARTOBJECT) {
          return doc.layers[i];
        }
      }
    }
    
    // If not found by name, find any smart object
    for (var i = 0; i < doc.layers.length; i++) {
      if (doc.layers[i].kind == LayerKind.SMARTOBJECT) {
        return doc.layers[i];
      }
    }
    
    return null;
  }
  
  function getLayerSelectionFromUser(smartDoc) {
    var layerList = [];
    var designIndex = -1;
    
    // Build layer list and find likely design layer
    for (var i = 0; i < smartDoc.layers.length; i++) {
      var layer = smartDoc.layers[i];
      var nameLower = layer.name.toLowerCase();
      
      // Check if this looks like a design layer
      if (designIndex < 0 && (
        nameLower.indexOf("design") !== -1 || 
        nameLower.indexOf("your") !== -1 || 
        nameLower.indexOf("here") !== -1 ||
        nameLower.indexOf("artwork") !== -1 ||
        nameLower.indexOf("replace") !== -1 ||
        nameLower.indexOf("mockup") !== -1 ||
        nameLower.indexOf("placeholder") !== -1)) {
        designIndex = i;
      }
      
      layerList.push({
        index: i,
        name: layer.name,
        isRecommended: false
      });
    }
    
    // Mark recommended layer
    if (designIndex >= 0) {
      layerList[designIndex].isRecommended = true;
    }
    
    // Create dialog
    var dialog = new Window("dialog", "Select Layer to Replace");
    dialog.orientation = "column";
    dialog.alignChildren = "left";
    dialog.spacing = 10;
    dialog.margins = 20;
    
    // Add instruction text
    var instructions = dialog.add("statictext");
    instructions.text = "Select which layer to replace with artwork:";
    instructions.graphics.font = ScriptUI.newFont(dialog.graphics.font.name, ScriptUI.FontStyle.BOLD, 14);
    
    // Add info text
    var info = dialog.add("statictext");
    info.text = "This layer will be replaced for all " + artworkFiles.length + " artwork files.";
    info.graphics.foregroundColor = info.graphics.newPen(info.graphics.PenType.SOLID_COLOR, [0.5, 0.5, 0.5], 1);
    
    // Add group for radio buttons
    var radioGroup = dialog.add("group");
    radioGroup.orientation = "column";
    radioGroup.alignChildren = "left";
    radioGroup.spacing = 8;
    radioGroup.margins = [0, 10, 0, 10];
    
    var radioButtons = [];
    var selectedIndex = designIndex >= 0 ? designIndex : 0;
    
    // Create radio button for each layer
    for (var i = 0; i < layerList.length; i++) {
      var radio = radioGroup.add("radiobutton");
      radio.text = layerList[i].name;
      
      if (layerList[i].isRecommended) {
        radio.text += "  ← RECOMMENDED";
      }
      
      radioButtons.push(radio);
      
      if (i === selectedIndex) {
        radio.value = true;
      }
      
      radio.layerIndex = i;
    }
    
    // Add button group
    var buttonGroup = dialog.add("group");
    buttonGroup.alignment = "center";
    buttonGroup.spacing = 10;
    
    var cancelBtn = buttonGroup.add("button", undefined, "Cancel");
    var okBtn = buttonGroup.add("button", undefined, "Replace Layer");
    okBtn.active = true;
    
    // Handle button clicks
    var result = null;
    
    okBtn.onClick = function() {
      for (var i = 0; i < radioButtons.length; i++) {
        if (radioButtons[i].value) {
          result = layerList[i];
          break;
        }
      }
      dialog.close();
    };
    
    cancelBtn.onClick = function() {
      dialog.close();
    };
    
    // Show dialog
    dialog.show();
    
    return result;
  }
  
  function scaleLayerToFitCanvas(doc, layer) {
    var docWidth = doc.width.value;
    var docHeight = doc.height.value;
    
    var bounds = layer.bounds;
    var layerWidth = bounds[2].value - bounds[0].value;
    var layerHeight = bounds[3].value - bounds[1].value;
    
    // Calculate scale to fit
    var scaleX = (docWidth / layerWidth) * 100;
    var scaleY = (docHeight / layerHeight) * 100;
    var scale = Math.min(scaleX, scaleY);
    
    // Only scale if needed
    if (Math.abs(scale - 100) > 0.1) {
      var idTrnf = charIDToTypeID("Trnf");
      var desc = new ActionDescriptor();
      var ref = new ActionReference();
      ref.putEnumerated(charIDToTypeID("Lyr "), charIDToTypeID("Ordn"), charIDToTypeID("Trgt"));
      desc.putReference(charIDToTypeID("null"), ref);
      
      desc.putUnitDouble(charIDToTypeID("Wdth"), charIDToTypeID("#Prc"), scale);
      desc.putUnitDouble(charIDToTypeID("Hght"), charIDToTypeID("#Prc"), scale);
      
      executeAction(idTrnf, desc, DialogModes.NO);
    }
  }
})();`;
}

function hasAnyVariations(variations: VariationSettings): boolean {
  return variations.distance.enabled || 
         variations.framing.enabled || 
         variations.tilt.enabled || 
         variations.rotation.enabled;
}